heat_template_version: 2016-10-14
description: Test AutoScaling
parameters:
  image:
    type: string
    description: Image used for servers
    default: [Image-ID]
  key:
    type: string
    description: SSH key to connect to the servers
    default: [Key-Name]
  flavor:
    type: string
    description: flavor used by the web servers
    default: [Flavor-Name]
  network:
    type: string
    description: Network used by the server
    default: [Internal-Network-ID]
  subnet_id:
    type: string
    description: subnet on which the load balancer will be located
    default: [Internal-Network-Subnet-ID]
  external_network_id:
    type: string
    description: Neutron external network
    default: [External-Network-ID]
  pool_id:
    type: string
    description: add server on pool of loadbalancer
    default: [LoadBalacner-Pool-ID]
resources:
  asg:
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: 1
      max_size: 3
      resource:
        type: lb_server.yaml
        properties:
          flavor: {get_param: flavor}
          image: {get_param: image}
          key_name: {get_param: key}
          network: {get_param: network}
          pool_id: {get_param: pool_id}
          subnet: {get_param: subnet_id}
          metadata: {"metering.server_group": {get_param: "OS::stack_id"}}
  web_server_scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: 80
      scaling_adjustment: 1
  web_server_scaledown_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: 80
      scaling_adjustment: -1
  cpu_alarm_high:
    type: OS::Aodh::GnocchiAggregationByResourcesAlarm
    properties:
      description: Scale up if CPU > 80%
      metric: cpu_util
      aggregation_method: mean
      granularity: 300
      evaluation_periods: 1
      threshold: 80
      resource_type: instance
      comparison_operator: gt
      alarm_actions:
        - {get_attr: [web_server_scaleup_policy, alarm_url]}
      query:
        str_replace:
          template: '{"=": {"server_group": "stack_id"}}'
          params:
            stack_id: {get_param: "OS::stack_id"}
  cpu_alarm_low:
    type: OS::Aodh::GnocchiAggregationByResourcesAlarm
    properties:
      description: Scale down if CPU < 15% for 5 minutes
      metric: cpu_util
      aggregation_method: mean
      granularity: 300
      evaluation_periods: 1
      threshold: 15
      resource_type: instance
      comparison_operator: lt
      alarm_actions:
        - {get_attr: [web_server_scaledown_policy, alarm_url]}
      query:
        str_replace:
          template: '{"=": {"server_group": "stack_id"}}'
          params:
            stack_id: {get_param: "OS::stack_id"}
  scale_out_alarm:
    type: OS::Ceilometer::Alarm
    properties:
      description: trigger when bandwidth insufficient
      meter_name: network.services.lb.incoming.bytes.rate
      statistic: avg
      period: 60
      evaluation_periods: 1
      threshold: 28000
      repeat_actions: True
      alarm_actions:
        user_data:
          get_file: ./aws/create_scaling.sh
      comparison_operator: ge
  scale_in_alarm:
    type: OS::Ceilometer::Alarm
    properties:
      description: trigger when bandwidth overflow
      meter_name: network.services.lb.incoming.bytes.rate
      statistic: avg
      period: 180
      evaluation_periods: 1
      threshold: 12000
      repeat_actions: True
      alarm_actions:
        user_data:
          get_file: ./aws/delete_scaling.sh
      comparison_operator: le
